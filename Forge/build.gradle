buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
//        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.25', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'net.darkhax.curseforgegradle' version "${cursegradle_version}"
    id 'com.modrinth.minotaur' version '2.+'
}

apply plugin: 'org.spongepowered.mixin'

def modVersion = version

archivesBaseName = "${mod_name}"
version = "${mc_version}-Forge-${version}"
group = maven_group

minecraft {
    mappings channel: 'official', version: mc_version

     // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}_forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}_forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}_forge.mixins.json"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url "https://maven.blamejared.com" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // YUNG's API
    implementation fg.deobf("com.yungnickyoung.minecraft.yungsapi:YungsApi:${yungsapi_mc_version}-Forge-${yungsapi_version}")

    // Terrablender
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${mc_version}-${terrablender_version}")

    // GeckoLib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${mc_version}:${geckolib_version}")

    // JEI
    // compile against the JEI API but do not include it at runtime
//    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}") // for some reason the API doesn't have the necessary classes?
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Other
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version
    inputs.property "yungsapi_version", project.yungsapi_version
    inputs.property "yungsapi_mc_version", project.yungsapi_mc_version
    inputs.property "mc_version", project.mc_version
    inputs.property "mod_description", project.mod_description
    inputs.property "mod_full_name", project.mod_full_name
    inputs.property "mod_id", project.mod_id
    inputs.property "forge_version", project.forge_version
    inputs.property "terrablender_version", project.terrablender_version
    inputs.property "geckolib_version", project.geckolib_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "yungsapi_version": project.yungsapi_version,
                "yungsapi_mc_version": project.yungsapi_mc_version,
                "terrablender_version": project.terrablender_version,
                "geckolib_version": project.geckolib_version,
                "mc_version": project.mc_version,
                "mod_description": project.mod_description,
                "mod_full_name": project.mod_full_name,
                "mod_id": project.mod_id,
                "forge_version": project.forge_version
    }
}

mixin {
    add project(":Common").sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    config "${mod_id}_forge.mixins.json"
}

jar.finalizedBy('reobfJar')

String[] compatibleVersions = project.compatible_versions.split(',')
task publishCurseForgeForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    apiToken = curseforgeApiKey

    debugMode = debug_publish.toBoolean()

    def mainFile = upload(curseforge_project_id_forge, tasks.jar.archiveFile)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    mainFile.releaseType = 'release'
    mainFile.addRequirement('terrablender')
    mainFile.addRequirement('geckolib')
    mainFile.addRequirement('yungs-api')
    mainFile.displayName = "[${mc_version}] ${mod_full_name} v${modVersion} (Forge)"
    compatibleVersions.each { version ->
        mainFile.addGameVersion(version)
    }
}

List compatibleVersionsList = project.compatible_versions.split(',')
modrinth {
    token = modrinthToken
    projectId = modrinth_project_id
    versionNumber = version
    versionName = "[${mc_version}] v${modVersion} (Forge)"
    versionType = "release"
    uploadFile = jar
    gameVersions = compatibleVersionsList
    debugMode = debug_publish.toBoolean()
    changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "yungs-api"
        required.project "terrablender"
        required.project "geckolib"
    }
}
tasks.modrinth.dependsOn(tasks.jar)